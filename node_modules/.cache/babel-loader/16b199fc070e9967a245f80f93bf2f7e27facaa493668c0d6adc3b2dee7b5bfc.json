{"ast":null,"code":"var _jsxFileName = \"/Users/borisfindell/Documents/Workspace/React/Udemy course/Pa\\u0301ctica 1/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\n/////////////////////////////////////////////////////////////////////////////////\n//Dos posibilidades distintas de usar el State:\n//una repitiendo el useState y cada una con su State, más código pero más clara\n//y bastante usada. La otra más ordenada, usando sólo un state con un objeto pero\n//menos usada y legible, aunque más eficiente.\n/////////////////////////////////////////////////////////////////////////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount:'',\n  //     enteredDate: ''\n  // })\n\n  // const titleChangeHandler = (event) => {\n  //     setEnteredTitle(event.target.value);\n  // setUserInput({\n  //      ...userInput,\n  //      enteredTitle: event.target.value});\n\n  //PARA EVITAR EL SPREAD OP, SI QUIERO MANTENER EL STATE PUEDO USAR ESTA FORMA\n\n  // setUserInput((prevState) => {\n  //     return {...prevState, enteredTitle: event.target.value}\n  // })\n\n  // }\n  // const amountChangeHandler = (event) => {\n  //     setEnteredAmount(event.target.value);\n  // setUserInput({\n  //     ...userInput,\n  //     enteredAmount: event.target.value});\n  // }\n  // const dateChangeHandler = (event) => {\n  // setEnteredDate(event.target.value);\n  // setUserInput({\n  //     ...userInput,\n  //     enteredDate: event.target.value});\n  // }\n\n  const inputChangeHandler = (ident, val) => {\n    if (ident === 'title') {\n      setEnteredTitle(val);\n    } else if (ident === 'amount') {\n      setEnteredTitle(val);\n      setEnteredAmount(val);\n    } else if (ident === 'date') {\n      setEnteredDate(val);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => inputChangeHandler('title', event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: event => inputChangeHandler('amount', event.target.value),\n          min: \"0.01\",\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: event => inputChangeHandler('date', event.target.value),\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expenses__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","inputChangeHandler","ident","val","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","event","target","value","min","step","max","_c","$RefreshReg$"],"sources":["/Users/borisfindell/Documents/Workspace/React/Udemy course/Páctica 1/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./ExpenseForm.css\";\n\n/////////////////////////////////////////////////////////////////////////////////\n//Dos posibilidades distintas de usar el State:\n//una repitiendo el useState y cada una con su State, más código pero más clara\n//y bastante usada. La otra más ordenada, usando sólo un state con un objeto pero\n//menos usada y legible, aunque más eficiente.\n/////////////////////////////////////////////////////////////////////////////////\n\nconst ExpenseForm = () => {\n    const [enteredTitle, setEnteredTitle] = useState('')\n    const [enteredAmount, setEnteredAmount] = useState('')\n    const [enteredDate, setEnteredDate] = useState('')\n    // const [userInput, setUserInput] = useState({\n    //     enteredTitle: '',\n    //     enteredAmount:'',\n    //     enteredDate: ''\n    // })\n    \n    // const titleChangeHandler = (event) => {\n    //     setEnteredTitle(event.target.value);\n        // setUserInput({\n        //      ...userInput,\n        //      enteredTitle: event.target.value});\n\n\n        //PARA EVITAR EL SPREAD OP, SI QUIERO MANTENER EL STATE PUEDO USAR ESTA FORMA\n\n            // setUserInput((prevState) => {\n            //     return {...prevState, enteredTitle: event.target.value}\n            // })\n\n    // }\n    // const amountChangeHandler = (event) => {\n    //     setEnteredAmount(event.target.value);\n        // setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value});\n    // }\n    // const dateChangeHandler = (event) => {\n        // setEnteredDate(event.target.value);\n        // setUserInput({\n        //     ...userInput,\n        //     enteredDate: event.target.value});\n    // }\n\n\n    const inputChangeHandler = (ident, val) => {\n      if (ident === 'title') {\n        setEnteredTitle(val)\n    } else if (ident === 'amount') {\n        setEnteredTitle(val)\n      setEnteredAmount(val)\n    } else if (ident === 'date') {\n      setEnteredDate(val)\n\n    }\n  }\n\n\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={(event) => inputChangeHandler('title', event.target.value)}></input>\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input type=\"number\" onChange={(event) => inputChangeHandler('amount', event.target.value)} min='0.01' step='0.01'></input>\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input onChange={(event) => inputChangeHandler('date', event.target.value)} type=\"date\" min=\"2019-01-01\" max='2022-12-31'></input>\n        </div>\n      </div>\n      <div className=\"new-expenses__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}